generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// NextAuth.js Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String            @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  conversations  Conversation[]
  settings       UserSettings?
  apiLimit       UserApiLimit?
  subscription   UserSubscription?
  analytics      Analytics[]
  networkMetrics NetworkMetrics[]
  featureUsage   UserFeatureUsage[]
  affiliate      Affiliate?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model UserApiLimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSubscription {
  id                      String     @id @default(cuid())
  userId                  String     @unique
  paypalSubscriptionId    String?    @unique @map("paypal_subscription_id")
  paypalCustomerId        String?    @map("paypal_customer_id")
  paypalPlanId            String?    @map("paypal_plan_id")
  paypalPayerId           String?    @map("paypal_payer_id")
  paypalStatus            String     @default("INACTIVE") @map("paypal_status")
  paypalCurrentPeriodEnd  DateTime?  @map("paypal_current_period_end")
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  user                    User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([paypalSubscriptionId])
}

model ToolUsage {
  id        String   @id @default(cuid())
  userId    String
  toolName  String
  params    String   @db.Text
  timestamp DateTime @default(now())
  status    String   @default("pending")
  result    String?  @db.Text
  error     String?  @db.Text
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([toolName])
  @@index([timestamp])
}

model LegalDocument {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String   @db.Text
  type        String
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

model CodeAnalysis {
  id          String   @id @default(cuid())
  userId      String
  codeContent String   @db.Text
  language    String
  result      String   @db.Text
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([language])
}

model Conversation {
  id           String       @id @default(cuid())
  userId       String
  title        String
  preview      String       @default("No messages yet")
  messages     Message[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  content        String        @db.Text
  role           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model UserSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  theme         String   @default("light")
  notifications Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String
  event     String
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model NetworkMetrics {
  id         String   @id @default(cuid())
  userId     String
  latency    Float
  bandwidth  Float
  packetLoss Float    @default(0)
  status     String   @default("active")
  metadata   Json?    @default("{}")
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserFeatureUsage {
  id          String   @id @default(cuid())
  userId      String
  featureType String
  count       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, featureType])
  @@index([userId])
  @@index([featureType])
}

model Affiliate {
  id           String     @id @default(cuid())
  userId       String     @unique
  referralCode String     @unique
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  commissions  Commission[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Commission {
  id             String     @id @default(cuid())
  affiliateId    String
  referredUserId String
  amount         Float
  status         String     @default("pending")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  affiliate      Affiliate  @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
}
